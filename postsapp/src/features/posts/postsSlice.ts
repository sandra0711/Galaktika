import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface IPost {
  "userId": number,
  "id": number,
  "title": string,
  "body": string,
};

export interface PostsState {
  posts: IPost[],
  status: 'idle' | 'loading' | 'failed';
}

const initialState: PostsState = {
  posts: [],
  status: 'idle',
}

export const getPosts = createAsyncThunk(
  'posts/fetchAllPosts',
  async () => {
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/posts/?_limit=10');
      // The value we return becomes the `fulfilled` action payload
      return await response.json();
    } catch (e) {
      throw new Error('ошибка')
    }
  }
);

export const fetchAddPost = createAsyncThunk(
  'posts/fetchAddPost',
  async ({ title, body }: any) => {
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
        method: 'POST',
        body: JSON.stringify({
          userId: 1,
          id: Math.random(),
          title: title,
          body: body,
        }),
        headers: {
          'Content-type': 'application/json; charset=UTF-8',
        },
      });
      return await response.json();
    } catch (e) {
      throw new Error('ошибка')
    }
  }
);

export const postsSlice = createSlice({
  name: 'posts',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPosts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getPosts.fulfilled, (state, action) => {
        state.status = 'idle';
        state.posts = action.payload;
      })
      .addCase(getPosts.rejected, (state, action) => {
        state.status = 'idle';
        console.log(action.error?.message);
      })

      .addCase(fetchAddPost.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAddPost.fulfilled, (state, action) => {
        state.status = 'idle';
        state.posts.push(action.payload)
      })
      .addCase(fetchAddPost.rejected, (state, action) => {
        state.status = 'idle';
        console.log(action.error?.message);
      });


  },
});

export default postsSlice.reducer;
